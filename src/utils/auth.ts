import { User, AuthState } from '../types';

const AUTH_TOKEN_KEY = 'taskflow_auth_token';
const USER_KEY = 'taskflow_user';

export const getAuthState = (): AuthState => {
  const token = localStorage.getItem(AUTH_TOKEN_KEY);
  const userStr = localStorage.getItem(USER_KEY);
  
  if (!token || !userStr) {
    return {
      user: null,
      token: null,
      isAuthenticated: false,
    };
  }

  try {
    const user = JSON.parse(userStr);
    return {
      user,
      token,
      isAuthenticated: true,
    };
  } catch {
    return {
      user: null,
      token: null,
      isAuthenticated: false,
    };
  }
};

export const setAuthState = (user: User, token: string): void => {
  localStorage.setItem(AUTH_TOKEN_KEY, token);
  localStorage.setItem(USER_KEY, JSON.stringify(user));
};

export const clearAuthState = (): void => {
  localStorage.removeItem(AUTH_TOKEN_KEY);
  localStorage.removeItem(USER_KEY);
};

export const generateMockJWT = (user: User): string => {
  // In a real app, this would be generated by the server
  const payload = {
    userId: user.id,
    email: user.email,
    exp: Date.now() + (24 * 60 * 60 * 1000), // 24 hours
  };
  
  return btoa(JSON.stringify(payload));
};